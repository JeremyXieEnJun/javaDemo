6月21日
见：https://www.cnblogs.com/qinxu/p/9504412.html
Java中Gson的使用
    JSON是一种文本形式的数据交换格式，它比XML更轻量、比二进制容易阅读和编写，调式也更加方便;解析和生成的方式很多，Java中最常用的
类库有：JSON-Java、Gson、Jackson、FastJson等

一、Gson的基本用法
　  Gson提供了fromJson() 和toJson() 两个直接用于解析和生成的方法，前者实现反序列化，后者实现了序列化；同时每个方法都提供了重载方法

	1）基本数据类型的解析
		Gson gson = new Gson();
	int i = gson.fromJson("100", int.class); //100
	double d = gson.fromJson("\"99.99\"", double.class);  //99.99
	boolean b = gson.fromJson("true", boolean.class);     // true
	String str = gson.fromJson("String", String.class);   // String

	2）基本数据类型的生成　
	Gson gson = new Gson();
	String jsonNumber = gson.toJson(100);       // 100
	String jsonBoolean = gson.toJson(false);    // false
	String jsonString = gson.toJson("String"); //"String"
　　
    3）POJO类的生成与解析
	public class User {
		//省略其它
		public String name;
		public int age;
		public String emailAddress;
	}
	　　生成JSON：　

	Gson gson = new Gson();
	User user = new User("张三",24);
	String jsonObject = gson.toJson(user); // {"name":"张三kidou","age":24}
	　　解析JSON：　

	Gson gson = new Gson();
	String jsonString = "{\"name\":\"张三\",\"age\":24}";
	User user = gson.fromJson(jsonString, User.class);

二、属性重命名 @SerializedName 注解的使用
    从上面POJO的生成与解析可以看出json的字段和值是的名称和类型是一一对应的，但也有一定容错机制(如第一个例子第3行将字符串的
99.99转成double型)，但有时候也会出现一些不和谐的情况，如：

　　期望的json格式：{"name":"张三","age":24,"emailAddress":"zhangsan@ceshi.com"}
　　实际：{"name":"张三","age":24,"email_address":"zhangsan@ceshi.com"}

　　Gson在序列化和反序列化时需要使用反射，一般各类库都将注解放到annotations包下，打开源码在com.google.gson包下有一个annotations，
里面有一个SerializedName的注解类。对于json中email_address这个属性对应POJO的属性则变成：　
    @SerializedName("email_address")
    public String emailAddress;
	为POJO字段提供备选属性名：SerializedName注解提供了两个属性，上面用到了其中一个，别外还有一个属性alternate，接收一个String数组
　　注：alternate需要2.4版本

	@SerializedName(value = "emailAddress", alternate = {"email", "email_address"})
	public String emailAddress;
	//当三个属性(email_address、email、emailAddress)都中出现任意一个时均可以得到正确的结果

	//当多种情况同时出时，以最后一个出现的值为准。
	Gson gson = new Gson();
	String json = "{\"name\":\"张三kidou\",\"age\":24,\"emailAddress\":\"zhangsan@ceshi.com\",\"email\":\"zhangsan_2@ceshi.com\",\"email_address\":\"zhangsan_3@ceshi.com\"}";
	User user = gson.fromJson(json, User.class);
	System.out.println(user.emailAddress); // zhangsan_3@example.com

三、Gson中使用泛型

　　例如：JSON字符串数组：["Android","Java","PHP"]
　　当要通过Gson解析这个json时，一般有两种方式：使用数组，使用List；而List对于增删都是比较方便的，所以实际使用是还是List比较多
　　
    数组比较简单：

	Gson gson = new Gson();
	String jsonArray = "[\"Android\",\"Java\",\"PHP\"]";
	String[] strings = gson.fromJson(jsonArray, String[].class);
	　　对于List将上面的代码中的 String[].class 直接改为 List<String>.class 是不行的，对于Java来说List<String> 和List<User>
	这俩个的字节码文件只一个那就是List.class，这是Java泛型使用时要注意的问题 泛型擦除

	　　为了解决的上面的问题，Gson提供了TypeToken来实现对泛型的支持，所以将以上的数据解析为List<String>时需要这样写
		Gson gson = new Gson();
		String jsonArray = "[\"Android\",\"Java\",\"PHP\"]";
		String[] strings = gson.fromJson(jsonArray, String[].class);
		List<String> stringList = gson.fromJson(jsonArray, new TypeToken<List<String>>() {}.getType());
        //TypeToken的构造方法是protected修饰的,所以上面才会写成new TypeToken<List<String>>() {}.getType() 而不是 new TypeToken<List<String>>().getType()
　　
    泛型解析对接口POJO的设计影响

　　　　泛型的引入可以减少无关的代码：　　
		{"code":"0","message":"success","data":{}}
		{"code":"0","message":"success","data":[]}

　　　　我们真正需要的data所包含的数据，而code只使用一次，message则几乎不用，如果Gson不支持泛型或不知道Gson支持泛型的同学一定
    会这么定义POJO

	public class UserResponse {
		public int code;
		public String message;
		public User data;
	}
　　   当其它接口的时候又重新定义一个XXResponse将data的类型改成XX，很明显code，和message被重复定义了多次，通过泛型可以将
    code和message字段抽取到一个Result的类中，这样只需要编写data字段所对应的POJO即可：

	public class Result<T> {
		public int code;
		public String message;
		public T data;
	}
    //对于data字段是User时则可以写为 Result<User> ,当是个列表的时候为 Result<List<User>>

四、Gson的流式反序列化
　　（1）自动方式
　　　　Gson提供了fromJson()和toJson() 两个直接用于解析和生成的方法，前者实现反序列化，后者实现了序列化。同时每个方法都提供了重载方法　　
	Gson.toJson(Object);
	Gson.fromJson(Reader,Class);
	Gson.fromJson(String,Class);
	Gson.fromJson(Reader,Type);
	Gson.fromJson(String,Type);
　　(2)手动方式：手动的方式就是使用stream包下的JsonReader类来手动实现反序列化，和Android中使用pull解析XML是比较类似的

	String json = "{\"name\":\"张三\",\"age\":\"24\"}";
	User user = new User();
	JsonReader reader = new JsonReader(new StringReader(json));
	reader.beginObject();
	while (reader.hasNext()) {
		String s = reader.nextName();
		switch (s) {
			case "name":
			user.name = reader.nextString();
			break;
			case "age":
			user.age = reader.nextInt(); //自动转换
			break;
			case "email":
			user.email = reader.nextString();
			break;
		}
	}
	reader.endObject(); // throws IOException
	System.out.println(user.name);  //张三
	System.out.println(user.age);   // 24
	System.out.println(user.email); //zhangsan@ceshi.com

　　自动方式最终都是通过JsonReader来实现的，如果第一个参数是String类型，那么Gson会创建一个StringReader转换成流操作

五、Gson的流式序列化

　　（1）自动方式
　　 Gson.toJson方法列表
　　//PrintStream(System.out) 、StringBuilder、StringBuffer和*Writer都实现了Appendable接口。　　

	Gson gson = new Gson();
	User user = new User("张三",24,"zhangsan@ceshi.com");
	gson.toJson(user,System.out);

　　(2)手动方式
	JsonWriter writer = new JsonWriter(new OutputStreamWriter(System.out));
	writer.beginObject() // throws IOException
		.name("name").value("张三")
		 .name("age").value(24)
		 .name("email").nullValue() //演示null
		.endObject(); // throws IOException
		writer.flush(); // throws IOException
	//{"name":"张三","age":24,"email":null}
    //除了beginObject、endObject还有beginArray和endArray，两者可以相互嵌套，注意配对即可。beginArray后不可以调用name方法，
	  同样beginObject后在调用value之前必须要调用name方法。

六、 使用GsonBuilder导出null值、格式化输出、日期时间
　　一般情况下Gson类提供的 API已经能满足大部分的使用场景，但有时需要更多特殊、强大的功能时，这时候就引入一个新的类 GsonBuilder。
    GsonBuilder从名上也能知道是用于构建Gson实例的一个类，要想改变Gson默认的设置必须使用该类配置Gson
　　
    GsonBuilder用法：　

	//各种配置  //生成配置好的Gson
	Gson gson = new GsonBuilder().create();

　　（1）Gson在默认情况下是不动导出值null的键的，如：
	public class User {

		 public String name;
		 public int age;
	　　　//省略
		 public String email;

	}
	Gson gson = new Gson();
	User user = new User(张三",24);
	System.out.println(gson.toJson(user)); //{"name":"张三","age":24}
    //email字段是没有在json中出现的，当在调试时需要导出完整的json串时或API接中要求没有值必须用Null时，就会比较有用。

　　使用方法：
	Gson gson = new GsonBuilder().serializeNulls() .create();
	User user = new User("张三", 24);
	System.out.println(gson.toJson(user)); //{"name":"张三","age":24,"email":null}

　　格式化输出、日期时间及其它：
	Gson gson = new GsonBuilder()
		//序列化null
		.serializeNulls()
		// 设置日期时间格式，另有2个重载方法
		// 在序列化和反序化时均生效
		.setDateFormat("yyyy-MM-dd")
		// 禁此序列化内部类
		 .disableInnerClassSerialization()
		//生成不可执行的Json（多了 )]}' 这4个字符）
		.generateNonExecutableJson()
		 //禁止转义html标签
		.disableHtmlEscaping()
		//格式化输出
		.setPrettyPrinting()
		.create();
	//：内部类(Inner Class)和嵌套类(Nested Class)的区别
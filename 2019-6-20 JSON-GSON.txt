6月20日
JSON和API接口初识
一、什么是JSON
    首先认识一下JSON
    JSON官网：http://www.json.org/json-zh.html
    JSON是一种数据格式，是一种在互联网传输中运用最多的数据交换语言，由于它轻便、灵巧，且能从各种语言中完全独立出来，所以成为
目前最理想的数据交换语言。
    例如我们完成了一个项目，该项目部署在web端和Android端，由于我们要使两者数据互通，这时我们就可以采用json传输数据，例如我们
在Android端添加数据，同时我们想使web同步，利用JSON可以直接将数据提交给web，然后使用后端语言进行处理即可。
    JSON语言采用key/value型数据格式
    key:value相信大家都不陌生，JSON亦是如此。JSON所有的内容都由key/value实现
    key是一个字符串关键字，用来唯一标识一个属性，例如"name"，"address"，"time"等等。
    value是关键字的值，它可以由以下几种数据构成:
		String：字符串
		number：数字
		object：对象（key:value）
		array：数组
		true：√
		false：×
		null：空
		结构之间可以相互嵌套，比如：
	
	{
	    "data": [{
	            "name": "qs395517243"
	        },
	        {
	            "age": 20
	        },
	        {
	            "hobby": [{
	                "first": "study"
	            }, {
	                "second": "play"
	            }, {
	                "third": "sport"
	            }]
	        },
	        {
	            "language": ["C", "java", "Python"]
	        },
	        "just a test"
	    ]
	}

	整体是一个object——key为"data"，value为数组array（length==5）

	最外层数组的第1块内容为object，key为"name"，value为字符串String："qs395517243"
	最外层数组的第2块内容为object，key为"age"，value为数值number：20
	最外层数组的第3块内容为object，key为"hobby"，value为数组array（length==3）
	hobby层数组的第1块内容为object，key为"first"，值为字符串String："study"
	hobby层数组的第2块内容为object，key为"second"，值为字符串String："play"
	hobby层数组的第3块内容为object，key为"third"，值为字符串String："sport"
	最外层数组的第4块内容为object，key为"language"，value为数组array（length==3）
	language层数组的第1块内容为字符串String："C"
	language层数组的第2块内容为字符串String："java"
	language层数组的第3块内容为字符串String："Python"
	最外层数组的第5块内容为字符串String："just a test"
	可以看到嵌套的效果

二、JSON：
    见：https://www.bilibili.com/video/av53809184/?p=8
	1. 概念： JavaScript Object Notation		JavaScript对象表示法
		Person p = new Person();
		p.setName("张三");
		p.setAge(23);
		p.setGender("男");

		var p = {"name":"张三","age":23,"gender":"男"};

		* json现在多用于存储和交换文本信息的语法
		* 进行数据的传输
		* JSON 比 XML 更小、更快，更易解析。
	
	2. 语法：
		1. 基本规则
			* 数据在名称/值对中：json数据是由键值对构成的
				* 键用引号(单双都行)引起来，也可以不使用引号
				* 值得取值类型：
					1. 数字（整数或浮点数）
					2. 字符串（在双引号中）
					3. 逻辑值（true 或 false）
					4. 数组（在方括号中）	{"persons":[{},{}]}
					5. 对象（在花括号中） {"address":{"province"："陕西"....}}
					6. null
			* 数据由逗号分隔：多个键值对由逗号分隔
			* 花括号保存对象：使用{}定义json 格式
			* 方括号保存数组：[]
		2. 获取数据:
			1. json对象.键名
			2. json对象["键名"]
			3. 数组对象[索引]
			4. 遍历
					 //1.定义基本格式
			        var person = {"name": "张三", age: 23, 'gender': true};
			
			        var ps = [{"name": "张三", "age": 23, "gender": true},
			            {"name": "李四", "age": 24, "gender": true},
			            {"name": "王五", "age": 25, "gender": false}];
			
			
			
			
			        //获取person对象中所有的键和值
			        //for in 循环
			       /* for(var key in person){
			            //这样的方式获取不行。因为相当于  person."name"
			            //alert(key + ":" + person.key);
			            alert(key+":"+person[key]);
			        }*/
			
			       //获取ps中的所有值
			        for (var i = 0; i < ps.length; i++) {
			            var p = ps[i];
			            for(var key in p){
			                alert(key+":"+p[key]);
			            }
			        }
	

	3. JSON数据和Java对象的相互转换

		* JSON解析器：
			* 常见的解析器：Jsonlib，Gson，fastjson，jackson
		
		1. JSON转为Java对象
			1. 导入jackson的相关jar包
			2. 创建Jackson核心对象 ObjectMapper
			3. 调用ObjectMapper的相关方法进行转换
				1. readValue(json字符串数据,Class)
		2. Java对象转换JSON
			1. 使用步骤：
				1. 导入jackson的相关jar包
				2. 创建Jackson核心对象 ObjectMapper
				3. 调用ObjectMapper的相关方法进行转换
					1. 转换方法：
						* writeValue(参数1，obj):
		                    参数1：
		                        File：将obj对象转换为JSON字符串，并保存到指定的文件中
		                        Writer：将obj对象转换为JSON字符串，并将json数据填充到字符输出流中
		                        OutputStream：将obj对象转换为JSON字符串，并将json数据填充到字节输出流中
		                * writeValueAsString(obj):将对象转为json字符串

					2. 注解：
						1. @JsonIgnore：排除属性。
						2. @JsonFormat：属性值得格式化
							* @JsonFormat(pattern = "yyyy-MM-dd")

					3. 复杂java对象转换
						1. List：数组
						2. Map：对象格式一致


# 案例：
	* 校验用户名是否存在
		1. 服务器响应的数据，在客户端使用时，要想当做json数据格式使用。有两种解决方案：
			1. $.get(type):将最后一个参数type指定为"json"
			2. 在服务器端设置MIME类型
				response.setContentType("application/json;charset=utf-8");

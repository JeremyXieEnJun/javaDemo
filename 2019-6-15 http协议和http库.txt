
6月17日
一、Java与Http协议
    http（超文本传输协议）是一个基于请求与响应模式的、无状态的、应用层的协议，常基于TCP的连接方式。HTTP协议的主要特点是：
     1.支持客户/服务器模式。
     2.简单快速：客户向服务器请求服务时，只需传送请求方法和路径。由于HTTP协议简单，通信速度很快。
     3.灵活：HTTP允许传输任意类型的数据对象。类型由Content-Type加以标记。
     4.无连接：即每次连接只处理一个请求，处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。
     5.无状态：无状态是指协议对于事务处理没有记忆能力。 

      http1.0协议默认的是非持久连接， HTTP1.1默认的连接方式为持久连接。

    非持久连接：每次服务器发出一个对象后，相应的TCP连接就被关闭，也就是说每个连接都没有持续到可用于传送其他对象。
每个TCP连接只用于传输一个请求消息和一个响应消息。
    持久连接：服务器在发出响应后让TCP连接继续打开着。同一对客户/服务器之间的后续请求和响应可以通过这个连接发送。
HTTP/1.1的默认模式使用带流水线的持久连接。

二、HTTP协议简介

	1、超文本传输协议（英文：Hyper Text Transfer Protocol，缩写：HTTP）是互联网上应用最为广泛的一种网络协议。设计HTTP最初的目
  的是为了提供一种发布和接收HTML页面的方法。通过HTTP协议请求的资源由统一资源标识符（Uniform Resource Identifiers，URI）来标识。

	HTTP报文是面向文本的，报文中的每一个字段都是一些ASCII码串，各个字段的长度是不确定的。HTTP有两类报文：请求报文和响应报文。

	HTTPS（Hypertext Transfer Protocol over Secure Socket Layer）简单讲是HTTP的安全版，在HTTP下加入SSL层。

	SSL（Secure Sockets Layer 安全套接层）主要用于Web的安全传输协议，在传输层对网络连接进行加密，保障在Internet上数据传输的安全。

	OSI网络模型 TCP/IP协议族
	HTTP是一个应用层协议，由请求和响应构成，是一个标准的客户端服务器模型。HTTP是基于TCP/IP的短连接，无状态的协议。HTTP假定其
下层协议提供可靠的传输。因此也就是其在TCP/IP协议族使用TCP作为其传输层。

	如图为我们常说的tcp/ip协议栈。Internet四层网络模型（也叫TCP/IP四层模型）包括数据链路层(网络接口)、网络层、传输层和应用层。
	见：https://blog.csdn.net/a_fool_program_ape/article/details/81748544

	HTTP协议的主要特点可概括如下：

		简单：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、POST、PUT。每种方法规定了客户与服务器联系的
	  不同类型。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。

		灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。

		请求-响应模式：客户端每次向服务器发起一个请求时都建立一个连接， 服务器处理完客户端的请求即断开连接。

		无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须
	   重传，这样可能导致每次连接传送的数据量增大。

	建立TCP连接需要三次握手:

	　　（1）客户端发送一个带SYN标志的TCP报文到服务器。这是三次握手过程中的报文1。

	　　（2） 服务器端回应客户端的，这是三次握手中的第2个报文，这个报文同时带ACK标志和SYN标志。因此它表示对刚才客户端SYN报文的
	          回应；同时又标志SYN给客户端，询问客户端是否准备好进行数据通讯。

	　　（3） 客户端必须再次回应服务段一个ACK报文，这是报文段3。

	关闭连接需要四次分手:(先关读,再关写)

	     (1) TCP客户端发送一个FIN，用来关闭客户到服务器的数据传送（报文段1）。

	　　（2） 服务器收到这个FIN，它发回一个ACK，确认序号为收到的序号加1（报文段2）。和SYN一样，一个FIN将占用一个序号。

	　　（3） 服务器关闭客户端的连接，发送一个FIN给客户端（报文段3）。

	　　（4） 客户段发回ACK报文确认，并将确认序号设置为收到序号加1（报文段4）。

	HTTP工作流程

		HTTP，是符合C/S模型的，总是Client端来发起请求。

		1、客户机（浏览器）主动向服务器（web   server)发出连接请求。 

		2、服务器接受连接请求并建立起连接。 (1,2步即我们所熟知的TCP三次握手)

		3、客户机通过此连接向服务器发出GET等http命令，(“HTTP请求报文”)。

		4、服务器接到命令并根据命令向客户机传送相应的数据，(“HTTP响应报文”)。

		5、客户机接收从服务器送过来的数据。

		6、服务器发送完数据后，主动关闭此次连接。 （”TCP四次分手“）。

	概况起来就是 客户/服务器传输过程可分为四个基本步骤：

		1) 浏览器与服务器建立连接； (TCP三次握手)

		2) 浏览器向服务器请求文档；

		3) 服务器响应浏览器请求；

		4) 断开连接。（”TCP四次分手“）

	HTTP协议的URL,URI介绍

	  HTTP协议中的URL(URL是一种特殊类型的URI（Uniform Resource Identifier），包含了用于查找某个资源的足够的信息)

	  主要是用于定位服务器端资源的位置。我们来看下它的语法定义：
       http://host[:port][path]

	其中：

		http:// 表示我们要使用HTTP协议；

		host 表示一个可用的域名或IP地址；

		port 为可选，表示要请求的端口号，缺省情况下为80

		path 为可选，表示要请求的资源所在的路径（也叫URI），缺省情况下为/ ,如果URL中没有给出path，那么当它作为请求URI时，

		必须以“/”的形式给出，比如浏览器中输入： www.abc.edu.cn 则浏览器自动换成 www.abc.edu.cn/ 。


6月18日
     注意：httpClient测试的请求路径，必须是一个服务器跑起来的路径才能够才行。
	 // 发送请求的url
    public static final String REQUEST_URL = "http://127.0.0.1:8080/javaDemo03/hello";
	
6月19日
     http响应状态 : https://www.cnblogs.com/sanshuiyijing/p/3906474.html
	 HTTP请求报文和HTTP响应报文 : https://blog.csdn.net/a_fool_program_ape/article/details/81748544
	 HTTP请求报文（请求行、请求头、请求体）：https://blog.csdn.net/heyue_99/article/details/74689057
	
一、HTTP请求报文
    一个HTTP请求报文由请求行（request line）、请求头部（header）、空行和请求数据4个部分组成，下图给出了请求报文的一般格式。
	见：https://blog.csdn.net/a_fool_program_ape/article/details/81748544
	
	报文由三个部分组成: 开始行,首部行和实体主体.在请求报文中,开始行就是请求行
		GET  index.html  / HTTP/1.1

		Host:"www.baidu.com"

		User-Agent:"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0"

		Connection: Keep-Alive

		POST  index.html  / HTTP/1.1

		Host:"www.baidu.com"

		User-Agent:"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0"

		Connection: Keep-Alive

		Pn=2&kw=nba

	1.请求行

		请求行由请求方法字段、URL字段和HTTP协议版本字段3个字段组成，它们用空格分隔。例如，GET /index.html HTTP/1.1。

		HTTP协议的请求方法有GET、POST、HEAD、PUT、DELETE、OPTIONS、TRACE、CONNECT。

	2.请求头部

		请求头部由键/值对组成，每行一对，键和值用英文冒号“:”分隔。请求头部通知服务器有关于客户端请求的信息

	 1）典型的常用请求头有：

		User-Agent：产生请求的客户端类型。

		Accept：客户端可识别的内容类型列表。

		Host：请求的主机名，允许多个域名同处一个IP地址，即虚拟主机。

		Accept-Encoding： 客户端使用的编码环境和编码方式

		Accept-Language： 客户端语言环境

		Authorization：授权信息，一般用于存放授权之后的信息

		Connection：表示是否需要持久连接

		Content-Length：表示请求数据正文的长度

		Cookie：这个与服务器端做交互的，存储保持会话的重要信息 Referer：表示该次请求的来源，一般用于做防盗链

	 2）HTTP 请求方法概述：

		GET: 请求读取由URL所标识的信息

		POST: 给服务器发送数据  （表单请求和AJAX请求）

		HEAD: 请求读取由URL所有标识的信息的首部

		PUT: 在指明的URL下存储一个文档

		OPTION: 请求一些选项的信息

		DELETE: 删除指明的URL所标识的资源

		TRACE: 用来进行环回测试的请求报文

		CONNECT: 用于代理服务器
    3、换行符
        最后一个请求头之后是一个空行，发送回车符和换行符，通知服务器以下不再有请求头。

    4、请求数据
       求数据不在GET方法中使用，而是在POST方法中使用。POST方法适用于需要客户填写表单的场合。与请求数据相关的最常使用的请求头
	是Content-Type和Content-Length。

二、HTTP响应报文
    HTTP响应也由四个部分组成，分别是：状态行、响应头、空格、响应数据。
     如下所示，HTTP响应的格式与请求的格式十分类似：
	见：https://blog.csdn.net/a_fool_program_ape/article/details/81748544
	
	响应报文的开始是状态行,包括三项内容: HTTP版本,状态码,解释状态码的简单短语

	在响应中唯一真正的区别在于第一行中用状态信息代替了请求信息。状态行（status line）通过提供一个状态码来说明所请求的资源情况。

	状态行格式如下：

	HTTP-Version Status-Code Reason-Phrase CRLF

	其中，HTTP-Version表示服务器HTTP协议的版本；Status-Code表示服务器发回的响应状态代码；Reason-Phrase表示状态代码的文本描述。状态代码由三位数字组成，第一个数字定义了响应的类别，且有五种可能取值。

		•• 1xx：指示信息--表示请求已接收，继续处理。

		•• 2xx：成功--表示请求已被成功接收、理解、接受。

		•• 3xx：重定向--要完成请求必须进行更进一步的操作。

		•• 4xx：客户端错误--请求有语法错误或请求无法实现。

		•• 5xx：服务器端错误--服务器未能实现合法的请求。

	常见状态代码、状态描述的说明如下。

		•• 200 OK：客户端请求成功。

		•• 301 Moved Permanently：客户端啊，你要请求的资源已经永久的搬家了，我把他的新地址放到了Location头部域中了；

		••302 Moved Temporarily：客户端啊，你要请求的资源临时有事去别的地方了，我把他的位置放到了Location头部域中了，你可以先去那里找他，不过他应该是会回到他自己的家的；

		••304 Not Modified：客户端啊，你要请求的资源自从上次你请求之后，就再也没有改动过，我想你是应该早就有这个资源了，所以在响应报文的数据部分我也没有再放这个资源。

		•• 400 Bad Request：客户端请求有语法错误，不能被服务器所理解。

		•• 401 Unauthorized：请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用。

		•• 403 Forbidden：服务器端顺利收到了客户端的请求，但是因为某些理由，服务器端拒绝为他提供服务

		•• 404 Not Found：请求资源不存在，八成是资源地址写错了；举个例子：输入了错误的URL。

		•• 500 Internal Server Error：服务器发生不可预期的错误。

		•• 502 Bad Gateway：客户端你好，我是请求报文的代理服务器，持有资源的那个服务器在给我发送资源时出问题了；

		•• 503 Server Unavailable：服务器当前不能处理客户端的请求，一段时间后可能恢复正常

	HTTP常见问题

	HTTP协议是无状态的和Connection: keep-alive的区别

	无状态是指协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。从另一方面讲，打开一个服务器上的网页和你之前打开这个服务器上的网页之间没有任何联系。HTTP是一个无状态的面向连接的协议，无状态不代表HTTP不能保持TCP连接，更不能代表HTTP使用的是UDP协议。

	从HTTP/1.1起，默认都开启了Keep-Alive，保持连接特性，简单地说，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，

	如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache、GlassFish）中设定这个时间。

	TCP (打电话)是长连接 稳定 TCP连接的建立需要三次握手

	UDP (写信)无连接 不稳定 用户数据报协议，是一个面向无连接的协议。采用该协议不需要两个应用程序先建立连接。UDP协议不提供差错恢复，不能提供数据重传，因此该协议传输数据安全性差

	HTTP 是短连接
	

	GET 参数追加在URL后 长度受限制 不安全

	POST 参数在请求报文的请求数据部分 参数长度比GET长 安全
	

	常用的HTTP请求方法如下：

    GET请求

	当客户端想从服务器读取文档时，点击网页上的超链接或者在浏览器输入框内输入地址按回车时，都是发送的GET请求，服务器根据请求的地址从资源文件中找到客户端想要的资源文件，放在响应报文中的相应数据部分回送给客户端

	使用GET请求需要将请求参数放在url之后，以?分割网址与参数，多个参数用&符号链接，例如https://www.baidu.com/?tn=monline_3_dg&pn=1   ?问号前表示请求地址，?后表示请求参数,&用来连接多个请求参数，这种请求方式对URL长度有限制，一般最多只能识别1024个字符，所以如果需要传输大量数据，也不适合使用GET请求，并且GET请求会把参数值直接暴露在URL地址中，不适合传输私密数据。

	POST请求
	对于上面提到的不适合使用GET方式的情况，可以考虑使用POST方式，因为使用POST方法可以允许客户端给服务器提供信息较多。POST方法将请求参数封装在HTTP请求数据中，以名称/值的形式出现，可以传输大量数据，这样POST方式对传送的数据大小没有限制，而且也不会显示在URL中。如果使用POST方式的话，格式如下：

	POST /search HTTP/1.1  

	Accept: image/gif, image/x-xbitmap

	Connection: Keep-Alive

	.......

	username=zhangsan&password=123

	可以看到，POST方式请求行中不包含数据字符串，这些数据保存在”请求内容”部分，各数据之间也是使用”&”符号隔开。POST方式大多用于页面的表单中。因为POST也能完成GET的功能，因此多数人在设计表单的时候一律都使用POST方式，其实这是一个误区。GET方式也有自己的特点和优势，我们应该根据不同的情况来选择是使用GET还是使用POST。

三、httpClient使用方式和步骤：
    Java HttpClient库的使用
	见：https://www.cnblogs.com/jpfss/p/7988675.html
（一）简介
	HttpClient是Apache的一个开源库，相比于JDK自带的URLConnection等，使用起来更灵活方便。
	使用方法可以大致分为如下八步曲：
	
	1、创建一个HttpClient对象;

	2、创建一个Http请求对象并设置请求的URL，比如GET请求就创建一个HttpGet对象，POST请求就创建一个HttpPost对象;

	3、如果需要可以设置请求对象的请求头参数，也可以往请求对象中添加请求参数;

	4、调用HttpClient对象的execute方法执行请求;

	5、获取请求响应对象和响应Entity;

	6、从响应对象中获取响应状态，从响应Entity中获取响应内容;

	7、关闭响应对象;

	8、关闭HttpClient.
 （二）测试Demo
    见：javaDemo 项目 javaDemo03
				
